#version 430 core

layout(local_size_x = 256, local_size_y = 1) in;

struct ParticleInfo {
    float x;
    float y;
    float velocityX;
    float velocityY;
    float width;
    float height;
    float color;
    float spawnTime;
    float lifetime;
};

layout(std430, binding = 0) buffer InData {
    ParticleInfo particleInfos[];
};

float rand(vec2 co) {
    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);
}

vec3 hsv2rgb(vec3 c) {
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

uniform float time;
uniform float xPos;
uniform float yPos;
uniform int numParticles;

float hash(vec2 p) {
    return fract(sin(dot(p, vec2(127.1, 311.7))) * 43758.5453);
}

vec2 noiseDirection(vec2 p) {
    float a = hash(p) * 6.2831853;
    return vec2(cos(a), sin(a));
}

void main() {
    uint id = gl_GlobalInvocationID.y * gl_NumWorkGroups.x * gl_WorkGroupSize.x + gl_GlobalInvocationID.x;
    if (id >= numParticles) return;

    ParticleInfo pOut;

    float radius = rand(vec2(id + 1, time)) * 100.0;
    vec2 pos = vec2(xPos, yPos) + noiseDirection(vec2(time * 0.2, id * 0.01)) * radius;

    pOut.x = pos.x;
    pOut.y = pos.y;

    float speed = 100.0 + hash(vec2(id, time)) * 150.0;
    vec2 dir = noiseDirection(pos * 0.02 + time * 0.5);
    pOut.velocityX = dir.x * speed;
    pOut.velocityY = dir.y * speed;

    pOut.spawnTime = time;
    pOut.width = rand(vec2(id + 3, time)) * 20.0;
    pOut.height = pOut.width;

    pOut.lifetime = 1.0 + rand(vec2(id + 4, time)) * 3.0;

    float brightness = 0.8 + rand(vec2(id + 8.0, time)) * 0.2;
    float hue = rand(vec2(id + 9.0, time)) * 255.0;
    vec3 rgb = hsv2rgb(vec3(hue, brightness, 1.0));

    pOut.color = float(
            (int(rgb.r * 255) << 16) |
                (int(rgb.g * 255) << 8) |
                (int(rgb.b * 255)) |
                (255 << 24)
        );

    particleInfos[id] = pOut;
}
